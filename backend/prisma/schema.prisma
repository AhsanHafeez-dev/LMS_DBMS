  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider          = "postgresql"
    url               = env("DATABASE_URL")
    directUrl         = env("DIRECT_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  }



  // 

  model User {
    id        Int    @id @default(autoincrement())
    userName  String @unique
    userEmail String @unique
    password  String
    role      String
    liked Like[]
    comments Comment[]
    refreshToken String @default("")
    verifiyOtp String @default("")
    verifiyOtpExpiresAt BigInt @default(0)
    resetOtp String @default("")
    resetOtpExpiresAt BigInt @default(0)
    isAccountVerified Boolean @default(false)
    
    
  }

  /// Core course data

  model Course {
    id              Int             @id @default(autoincrement())
    instructorId    String
    instructorName  String
    date            DateTime?     @default(now())
    title           String
    category        String
    level           String
    primaryLanguage String
    subtitle        String
    description     String
    image           String
    welcomeMessage  String
    pricing         Float
    objectives      String
    isPublished     Boolean
    curriculum        Lecture[]       @relation("CourseLectures")
    students        CourseStudent[] @relation("CourseEnrollments")
    noOfLectures Int @default(1)
    isFree Boolean @default(false)
    comments Comment[]
    noOfComments Int @default(0)
    specialization Specialization? @relation("specializationCourses",fields: [specializationId],references: [id])
    specializationId String?
  }

  /// Individual lectures in a course
  model Lecture {
    id          Int     @id @default(autoincrement())
    title       String
    videoUrl    String
    publicId    String  @map("public_id")
    freePreview Boolean
    course      Course?  @relation("CourseLectures", fields: [courseId], references: [id])
    courseId    Int?
    comment Comment[]
    likes Like[]
    noOfComments Int @default(0)
    noOfLikes Int @default(0)
    module Module? @relation(fields: [moduleId],references: [id])
    moduleId String?

    @@index([courseId])
  }

  /// Join table: which students are enrolled in which course
  model CourseStudent {
    id           Int    @id @default(autoincrement())
    studentId    String
    studentName  String
    studentEmail String
    paidAmount   Float
    course       Course @relation("CourseEnrollments", fields: [courseId], references: [id])
    courseId     Int
    attendance Float? @default(0)

    @@index([courseId])
    @@index([studentId])
  }

  /// Tracks overall progress per user & course
  model CourseProgress {
    id              String            @id @default(cuid())
    userId          String
    courseId        String
    completed       Boolean
    completionDate  DateTime?
    lectureProgress LectureProgress[]
    noOfLecturesViews Int  @default(0)

    @@index([userId, courseId])
  }

  /// Progress on each lecture within a course
  model LectureProgress {
    id               String         @id @default(cuid())
    lectureId        Int
    viewed           Boolean
    dateViewed       DateTime?
    courseProgress   CourseProgress @relation(fields: [courseProgressId], references: [id])
    courseProgressId String

    @@index([lectureId])
  }

  /// All orders placed by users
  model Order {
    id             String   @id @default(cuid())
    userId         String
    userName       String
    userEmail      String
    orderStatus    String
    paymentMethod  String
    paymentStatus  String
    orderDate      DateTime
    paymentId      String?
    payerId        String?
    instructorId   String
    instructorName String
    courseImage    String
    courseTitle    String
    courseId       String
    coursePricing  Float

    @@index([userId])
  }

  /// (Alternative) If you prefer simply listing purchases per user,
  /// you could drop `CourseStudent` and use this instead:
  model StudentCourse {
    id             String   @id @default(cuid())
    userId         String
    courseId       String   // foreign key
    title          String
    instructorId   String   // foreign key
    instructorName String
    dateOfPurchase DateTime
    courseImage    String
    attendance Float? @default(0)


    @@index([userId])
    @@index([courseId])
  }

  model Comment{
    id String @id @default(cuid())

    comment Comment? @relation("CommentToComment",fields: [commentId],references: [id]) 
    commentId String?
    comments Comment[] @relation("CommentToComment")

    lecture Lecture?   @relation(fields: [lectureId],references: [id])
    lectureId Int? 

    course Course? @relation(fields: [courseId],references: [id])
    courseId Int?

    likes Like[]
    text String

    noOfReplies Int @default(0)
    noOfLikes Int @default(0)

    owner User @relation(fields: [ownerId],references: [id])
    ownerId Int

  }

  model Like{
    id String @id  @default(cuid())
    
    lecture Lecture? @relation(fields: [lectureId],references: [id])
    lectureId Int?

    comment Comment? @relation(fields: [commentId],references: [id])
    commentId String? 

    owner   User  @relation(fields: [ownerId],references: [id])
    ownerId Int


  }

model Specialization{
  
  id String @id @default(cuid())
  courses Course[]  @relation("specializationCourses")
  name String
  price Float
  noOfCoursed Int

}

model Module{
  id String @id @default(cuid())
  name String
  noOfLectures Int
  lectures Lecture[]
  duration DateTime?
}